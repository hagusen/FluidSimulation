// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel shadertest
#pragma kernel LinearSolve
#pragma kernel Setboundsv0
#pragma kernel ProjectStart
#pragma kernel LinearSolve2
#pragma kernel ProjectEnd
#pragma kernel Advect
#pragma kernel Render
#pragma kernel AddVelocity
#pragma kernel ProjectStart2
#pragma kernel LinearSolve22
#pragma kernel ProjectEnd2


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;


RWStructuredBuffer<float2> v;
RWStructuredBuffer<float2> v0;

int size;
int iterations;
float dt;



int IX(int x, int y)
{
	return x * size + y;
}


[numthreads(8, 8, 1)]

	void shadertest
	(
	uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	Result[id.xy] = float4(id.x & id.y, (id.x & 15) / 15.0, (id.y & 15) / 15.0, 0.0);
    
    
}


float a; // step for linear solve
float c; // average of neighbors

[numthreads(32, 32, 1)]

	void LinearSolve
	(
	uint3 id : SV_DispatchThreadID)
{
	if (id.x == 0 || id.y == 0)
	{
		return;
	}
	if (id.x == size - 1 || id.y == size - 1)
	{
		return;
	}

	int index = IX(id.x, id.y);
    
    

	v[index] = (v0[index] + a *
                            // Neighbors
									(v[IX(id.x + 1, id.y)]
                                    + v[IX(id.x - 1, id.y)]
                                    + v[IX(id.x + 1, id.y + 1)]
                                    + v[IX(id.x + 1, id.y - 1)])
							) / c;
}

// for v0 true
[numthreads(32, 32, 1)]

	void Setboundsv0
	(
	uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	int index = IX(id.x, id.y);
	
	// x border
	v0[IX(id.x, 0)] = float2(v0[IX(id.x, 1)].x, -v0[IX(id.x, 1)].y);
	v0[IX(id.x, size - 1)] = float2(v0[IX(id.x, size - 2)].x, -v0[IX(id.x, size - 2)].y);
	
	// y Border
	v0[IX(0, id.y)] = float2(-v0[IX(1, id.y)].x, v0[IX(1, id.y)].y);
	v0[IX(size - 1, id.y)] = float2(-v0[IX(size - 2, id.y)].x, v0[IX(size - 2, id.y)].y);
	
	
	//Corners
	if (id.x == 0 && id.y == 0)
	{
		v0[IX(0, 0)] = 0.5f * (v0[IX(1, 0)] + v0[IX(0, 1)]);
		v0[IX(0, size - 1)] = 0.5f * (v0[IX(1, size - 1)] + v0[IX(0, size - 2)]);
		
		v0[IX(size - 1, 0)] = 0.5f * (v0[IX(size - 2, 0)] + v0[IX(size - 1, 1)]);
		v0[IX(size - 1, size - 1)] = 0.5f * (v0[IX(size - 2, size - 1)] + v0[IX(size - 1, size - 2)]);
	
	}
}




[numthreads(32, 32, 1)]

	void ProjectStart
	(
	uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	int index = IX(id.x, id.y);

	
	
	v[index].y = -0.5f *
									(v0[IX(id.x + 1, id.y)].x
                                    - v0[IX(id.x - 1, id.y)].x
                                    + v0[IX(id.x, id.y + 1)].y
                                    - v0[IX(id.x, id.y - 1)].y	
									) / size;
	
	v[index].x = 0;
	
	
	//set bounds false
	// x border
	v[IX(id.x, 0)] = v[IX(id.x, 1)];
	v[IX(id.x, size - 1)] = v[IX(id.x, size - 2)];
	// y Border
	v[IX(0, id.y)] = v[IX(1, id.y)];
	v[IX(size - 1, id.y)] = v[IX(size - 2, id.y)];
	
	//
	
}


[numthreads(32, 32, 1)]

	void LinearSolve2
	(
	uint3 id : SV_DispatchThreadID)
{
	if (id.x == 0 || id.y == 0)
	{
		return;
	}
	if (id.x == size - 1 || id.y == size - 1)
	{
		return;
	}

	int index = IX(id.x, id.y);
    
    

	v[index].x = (v[index].y +
                            // Neighbors
									(v[IX(id.x + 1, id.y)].x
                                    + v[IX(id.x - 1, id.y)].x
                                    + v[IX(id.x, id.y + 1)].x
                                    + v[IX(id.x, id.y - 1)].x
							)) / 4;

	//set bounds false
	// x border
	v[IX(id.x, 0)] = v[IX(id.x, 1)];
	v[IX(id.x, size - 1)] = v[IX(id.x, size - 2)];
	// y Border
	v[IX(0, id.y)] = v[IX(1, id.y)];
	v[IX(size - 1, id.y)] = v[IX(size - 2, id.y)];
	
}


[numthreads(32, 32, 1)]

	void ProjectEnd
	(
	uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	int index = IX(id.x, id.y);

	
	
	v0[index].x -= 0.5f * (v[IX(id.x + 1, id.y)].x - v[IX(id.x - 1, id.y)].x) * size;
	
	v0[index].y -= 0.5f * (v[IX(id.x, id.y + 1)].x - v[IX(id.x, id.y - 1)].x) * size;

	

	
	
	// x border
	v0[IX(id.x, 0)] = float2(v0[IX(id.x, 1)].x, -v0[IX(id.x, 1)].y);
	v0[IX(id.x, size - 1)] = float2(v0[IX(id.x, size - 2)].x, -v0[IX(id.x, size - 2)].y);
	
	// y Border
	v0[IX(0, id.y)] = float2(-v0[IX(1, id.y)].x, v0[IX(1, id.y)].y);
	v0[IX(size - 1, id.y)] = float2(-v0[IX(size - 2, id.y)].x, v0[IX(size - 2, id.y)].y);
	
	
	
	//Corners
	if (id.x == 0 && id.y == 0)
	{
		v0[IX(0, 0)] = 0.5f * (v0[IX(1, 0)] + v0[IX(0, 1)]);
		v0[IX(0, size - 1)] = 0.5f * (v0[IX(1, size - 1)] + v0[IX(0, size - 2)]);
		
		v0[IX(size - 1, 0)] = 0.5f * (v0[IX(size - 2, 0)] + v0[IX(size - 1, 1)]);
		v0[IX(size - 1, size - 1)] = 0.5f * (v0[IX(size - 2, size - 1)] + v0[IX(size - 1, size - 2)]);
	
	}
	
}

//Input
float dtx;
float dty;
float sizefloat;
//

float i0, i1, j0, j1;
float s0, s1, t0, t1;
float tmp1, tmp2, x, y;

float ifloat, jfloat;

[numthreads(32, 32, 1)]

	void Advect
	(
	uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	int index = IX(id.x, id.y);

	
	tmp1 = dtx * v0[index].x;
	tmp2 = dty * v0[index].y;

	x = (float) id.x - tmp1;
	y = (float) id.y - tmp2; // float
	
                    //mathf.clamp?
	if (x < 0.5f)
		x = 0.5f;
	if (x > size + 0.5f)
		x = size + 0.5f;

	i0 = floor(x);
	i1 = i0 + 1.0f;

	if (y < 0.5f)
		y = 0.5f;
	if (y > size + 0.5f)
		y = size + 0.5f;

	j0 = floor(y);
	j1 = j0 + 1.0f;

	s1 = x - i0;
	s0 = 1.0f - s1;
	t1 = y - j0;
	t0 = 1.0f - t1;

	int i0i = (int) clamp(i0, 0, size - 1);
	int i1i = (int) clamp(i1, 0, size - 1);
	int j0i = (int) clamp(j0, 0, size - 1);
	int j1i = (int) clamp(j1, 0, size - 1);

                    // fixxxxxxxxxxxxx
	v[index] =
                         // maybe will break it v0!
                         s0 * (t0 * v0[IX(i0i, j0i)] + t1 * v0[IX(i0i, j1i)]) +
                         s1 * (t0 * v0[IX(i1i, j0i)] + t1 * v0[IX(i1i, j1i)]);
		
	
	
		// x border
	v[IX(id.x, 0)] = float2(v[IX(id.x, 1)].x, -v[IX(id.x, 1)].y);
	v[IX(id.x, size - 1)] = float2(v[IX(id.x, size - 2)].x, -v[IX(id.x, size - 2)].y);
	
	// y Border
	v[IX(0, id.y)] = float2(-v[IX(1, id.y)].x, v[IX(1, id.y)].y);
	v[IX(size - 1, id.y)] = float2(-v[IX(size - 2, id.y)].x, v[IX(size - 2, id.y)].y);
	
	
	
	//Corners
	if (id.x == 0 && id.y == 0)
	{
		v[IX(0, 0)] = 0.5f * (v[IX(1, 0)] + v[IX(0, 1)]);
		v[IX(0, size - 1)] = 0.5f * (v[IX(1, size - 1)] + v[IX(0, size - 2)]);
		
		v[IX(size - 1, 0)] = 0.5f * (v[IX(size - 2, 0)] + v[IX(size - 1, 1)]);
		v[IX(size - 1, size - 1)] = 0.5f * (v[IX(size - 2, size - 1)] + v[IX(size - 1, size - 2)]);
	
	}
	
	
}


[numthreads(32, 32, 1)]

	void Render
	(
	uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	int index = id.x * size + id.y;

	Result[id.xy] = float4(v[index].x, v[index].y, 0, 0.0);
	
}



float2 velToAdd;
uint2 position;

[numthreads(1, 1, 1)]

	void AddVelocity
	(
	uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	int index = IX(id.x, 2);
	
	//int index = position.x * size + position.y;

	v[2] += float2(40, 0);
	
}






[numthreads(32, 32, 1)]

	void ProjectStart2
	(
	uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	int index = id.x * size + id.y;


	v0[index].y = -0.5f *
									(v[IX(id.x + 1, id.y)].x
                                    - v[IX(id.x - 1, id.y)].x
                                    + v[IX(id.x, id.y + 1)].y
                                    - v[IX(id.x, id.y - 1)].y	
									) / size;
	
	v0[index].x = 0;
	
	
	//set bounds false
	// x border
	v0[IX(id.x, 0)] = v0[IX(id.x, 1)];
	v0[IX(id.x, size - 1)] = v0[IX(id.x, size - 2)];
	// y Border
	v0[IX(0, id.y)] = v0[IX(1, id.y)];
	v0[IX(size - 1, id.y)] = v0[IX(size - 2, id.y)];
	
	//
	
	
}


[numthreads(32, 32, 1)]

	void LinearSolve22
	(
	uint3 id : SV_DispatchThreadID)
{
	if (id.x == 0 || id.y == 0)
	{
		return;
	}
	if (id.x == size - 1 || id.y == size - 1)
	{
		return;
	}

	int index = id.x * size + id.y;
    
    
	
	v0[index].x = (v0[index].y +
                            // Neighbors
									(v0[IX(id.x + 1, id.y)].x
                                    + v0[IX(id.x - 1, id.y)].x
                                    + v0[IX(id.x, id.y + 1)].x
                                    + v0[IX(id.x, id.y - 1)].x
							)) / 4;

	//set bounds false
	// x border
	v0[IX(id.x, 0)] = v0[IX(id.x, 1)];
	v0[IX(id.x, size - 1)] = v0[IX(id.x, size - 2)];
	// y Border
	v0[IX(0, id.y)] = v0[IX(1, id.y)];
	v0[IX(size - 1, id.y)] = v0[IX(size - 2, id.y)];
	
}


[numthreads(32, 32, 1)]

	void ProjectEnd2
	(
	uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	int index = id.x * size + id.y;

	
	
	
	
	v[index].x -= 0.5f * (v0[IX(id.x + 1, id.y)].x - v0[IX(id.x - 1, id.y)].x) * size;
	
	v[index].y -= 0.5f * (v0[IX(id.x, id.y + 1)].x - v0[IX(id.x, id.y - 1)].x) * size;

	
	
	// x border
	v[IX(id.x, 0)] = float2(v[IX(id.x, 1)].x, -v[IX(id.x, 1)].y);
	v[IX(id.x, size - 1)] = float2(v[IX(id.x, size - 2)].x, -v[IX(id.x, size - 2)].y);
	
	// y Border
	v[IX(0, id.y)] = float2(-v[IX(1, id.y)].x, v[IX(1, id.y)].y);
	v[IX(size - 1, id.y)] = float2(-v[IX(size - 2, id.y)].x, v[IX(size - 2, id.y)].y);
	
	
	
	
	
	//Corners
	if (id.x == 0 && id.y == 0)
	{
		v[IX(0, 0)] = 0.5f * (v[IX(1, 0)] + v[IX(0, 1)]);
		v[IX(0, size - 1)] = 0.5f * (v[IX(1, size - 1)] + v[IX(0, size - 2)]);
		
		v[IX(size - 1, 0)] = 0.5f * (v[IX(size - 2, 0)] + v[IX(size - 1, 1)]);
		v[IX(size - 1, size - 1)] = 0.5f * (v[IX(size - 2, size - 1)] + v[IX(size - 1, size - 2)]);
	
	}
	
}